/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package achmad.rifai.mathsamurai;

import achmad.rifai.mathsamurai.obj.Ronin;
import achmad.rifai.mathsamurai.obj.Samurai;
import achmad.rifai.mathsamurai.util.Soal;
import achmad.rifai.mathsamurai.util.Work;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javazoom.jl.decoder.JavaLayerException;

/**
 *
 * @author ashura
 */
public class SoalKata extends javax.swing.JDialog {
    private GameView gv;
    private GameModel gm;
    private Soal soale;
    private Thread t;
    private boolean running=true;
    private javazoom.jl.player.Player p;
    /**
     * Creates new form SoalKata
     */
    public SoalKata(java.awt.Frame parent, boolean modal, GameView gv, GameModel gm) {
        super(parent, modal);
        this.gm=gm;
        this.gv=gv;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        waktu = new javax.swing.JLabel();
        soal = new javax.swing.JLabel();
        val = new javax.swing.JFormattedTextField();
        s = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        waktu.setForeground(new java.awt.Color(255, 0, 0));
        waktu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        waktu.setText("10");

        soal.setText("SOALLLLLLL");

        val.setForeground(new java.awt.Color(0, 0, 0));
        val.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        val.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        val.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valActionPerformed(evt);
            }
        });
        val.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                valKeyReleased(evt);
            }
        });

        s.setText("SUBMIT");
        s.setEnabled(false);
        s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(s, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(waktu, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(soal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(val)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waktu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(soal)
                    .addComponent(val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(s)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        soale=Work.genSoal(gm.getPlayer().getLevel());
        soal.setText(soale.toString());
        t=new Thread(()->{
            waktuJalan();
        }); t.start();
    }//GEN-LAST:event_formWindowOpened

    private void valKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valKeyReleased
        if(!"".equals(val.getText())){
            if(val.isEditValid()&&val.isValid())val.setForeground(Color.BLACK);
            else val.setForeground(Color.red);
        }else val.setForeground(Color.red);
        s.setEnabled(Color.BLACK==val.getForeground());
    }//GEN-LAST:event_valKeyReleased

    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        running=false;
        prosesJawab();
    }//GEN-LAST:event_sActionPerformed

    private void valActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton s;
    private javax.swing.JLabel soal;
    private javax.swing.JFormattedTextField val;
    private javax.swing.JLabel waktu;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("SleepWhileInLoop")
    private void waktuJalan() {
        if(!running)return;
        for(int x=10;x>=0;x--){
            waktu.setText(""+x);
            if(!running)return;
            try {
                Thread.sleep(1000);
                if(!running)return;
            } catch (InterruptedException ex) {
                Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                if(!running)return;
            }if(!running)return;
        } prosesJawab();
    }

    private void prosesJawab() {
        new Thread(()->{
            if(!"".equals(val.getText())){
                if(soale.benar(Float.parseFloat(val.getText())))shogunSlash();
                else roninSlash();
            }else roninSlash();
            lanjutan();
        }).start();
        gm.setState(GameModel.State.PAUSE);
        setVisible(false);
    }

    private void shogunSlash() {
        shogunKiri1();
        shogunKiri2();
        shogunKiri3();
        shogunKiri4();
        shogunKiri5();
        shogunKiri6();
        int l=gm.getPlayer().getLevel();
        gm.getPlayer().setGold(gm.getPlayer().getGold()+(20*l));
        gm.getPlayer().setExp(gm.getPlayer().getExp()+(20*l));
        if(l<gm.getPlayer().getLevel())levelUp();
    }

    private void roninSlash() {
        roninKiri1();
        roninKiri2();
        roninKiri3();
        roninKiri4();
        roninKiri5();
        roninKiri6();
        gm.getPlayer().setNyawa(gm.getPlayer().getNyawa()-1);
    }

    private void lanjutan() {
        if(0==gm.getPlayer().getNyawa()||5==gm.getPlayer().getLevel()){
            if(5==gm.getPlayer().getLevel()){
                gm.getPlayer().setState(Samurai.State.IDLE);
                gm.getMusuh().setState(Ronin.State.DIED);
            }else{
                gm.getPlayer().setState(Samurai.State.DIED);
                gm.getMusuh().setState(Ronin.State.IDLE);
            } gm.setState(GameModel.State.LOSE);
        }else{
            gm.setState(GameModel.State.RUN);
            gm.getMusuh().setState(Ronin.State.DIED);
        }
    }

    private void shogunKiri1() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH1_SOUND));
            new Thread(() -> {
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.WIN);
        gm.getMusuh().setState(Ronin.State.LOSE);
        gm.getAttack().setHitbox(gm.getMusuh().getHitbox());
        gm.getAttack().setShowing(true);
        gm.getAttack().setMode(false);
        gm.getPlayer().setKiri(1);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void shogunKiri2() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH2_SOUND));
            new Thread(() -> {
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.WIN);
        gm.getMusuh().setState(Ronin.State.LOSE);
        gm.getAttack().setMode(true);
        gm.getAttack().setShowing(true);
        gm.getPlayer().setKiri(1);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void shogunKiri3() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH1_SOUND));
            new Thread(() -> {
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.WIN);
        gm.getMusuh().setState(Ronin.State.LOSE);
        gm.getAttack().setMode(false);
        gm.getAttack().setShowing(true);
        gm.getPlayer().setKiri(2);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void shogunKiri4() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH2_SOUND));
            new Thread(() -> {
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.WIN);
        gm.getMusuh().setState(Ronin.State.LOSE);
        gm.getAttack().setMode(true);
        gm.getAttack().setShowing(true);
        gm.getPlayer().setKiri(2);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void shogunKiri5() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH1_SOUND));
            new Thread(() -> {
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.WIN);
        gm.getMusuh().setState(Ronin.State.LOSE);
        gm.getAttack().setMode(false);
        gm.getAttack().setShowing(true);
        gm.getPlayer().setKiri(3);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void shogunKiri6() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH2_SOUND));
            new Thread(() -> {
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.WIN);
        gm.getMusuh().setState(Ronin.State.LOSE);
        gm.getAttack().setMode(true);
        gm.getAttack().setShowing(true);
        gm.getPlayer().setKiri(3);
        gv.repaint();
        while(!p.isComplete()){}
        gm.getAttack().setShowing(false);
    }

    private void levelUp() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.UP_SOUND));
            new Thread(()->{
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        } gm.getPlayer().setState(Samurai.State.IDLE);
        gm.getMusuh().setState(Ronin.State.DIED);
        gm.getAttack().setShowing(false);
        gm.getUp().setShow(true);
        gv.repaint();
        while(!p.isComplete()){}
        gm.getUp().setShow(false);
    }

    private void roninKiri1() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH1_SOUND));
            new Thread(()->{
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.IDLE);
        gm.getMusuh().setState(Ronin.State.WIN);
        gm.getMusuh().setMode(1);
        gm.getDamage().setMode(false);
        gm.getDamage().setShowing(true);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void roninKiri2() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH2_SOUND));
            new Thread(()->{
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.IDLE);
        gm.getMusuh().setState(Ronin.State.WIN);
        gm.getMusuh().setMode(1);
        gm.getDamage().setShowing(true);
        gm.getDamage().setMode(true);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void roninKiri3() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH1_SOUND));
            new Thread(()->{
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.IDLE);
        gm.getMusuh().setState(Ronin.State.WIN);
        gm.getMusuh().setMode(2);
        gm.getDamage().setMode(false);
        gm.getDamage().setShowing(true);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void roninKiri4() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH2_SOUND));
            new Thread(()->{
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.IDLE);
        gm.getMusuh().setState(Ronin.State.WIN);
        gm.getMusuh().setMode(2);
        gm.getDamage().setMode(true);
        gm.getDamage().setShowing(true);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void roninKiri5() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH1_SOUND));
            new Thread(()->{
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.IDLE);
        gm.getMusuh().setState(Ronin.State.WIN);
        gm.getMusuh().setMode(3);
        gm.getDamage().setMode(false);
        gm.getDamage().setShowing(true);
        gv.repaint();
        while(!p.isComplete()){}
    }

    private void roninKiri6() {
        try {
            p=new javazoom.jl.player.Player(getClass().getResourceAsStream(Konstanta.SLASH2_SOUND));
            new Thread(()->{
                try {
                    p.play();
                } catch (JavaLayerException ex) {
                    Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
                }
            }).start();
        } catch (JavaLayerException ex) {
            Logger.getLogger(SoalKata.class.getName()).log(Level.SEVERE, null, ex);
        }gm.getPlayer().setState(Samurai.State.IDLE);
        gm.getMusuh().setState(Ronin.State.WIN);
        gm.getMusuh().setMode(3);
        gm.getDamage().setMode(true);
        gm.getDamage().setShowing(true);
        gv.repaint();
        gm.getDamage().setShowing(false);
        while(!p.isComplete()){}
    }
}
